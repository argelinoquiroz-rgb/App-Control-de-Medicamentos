import streamlit as st
import pandas as pd
import os
from datetime import datetime
from PIL import Image

# ==============================
# CONFIGURACI√ìN INICIAL
# ==============================
st.set_page_config(
    page_title="Control de Estado de Medicamentos",
    page_icon="üíä",
    layout="wide"
)

# ---------------- CONFIGURACI√ìN DE RUTAS ----------------
BASE_DIR = os.getcwd()
USUARIOS_FILE = os.path.join(BASE_DIR, "usuarios.csv")
LOGO_PATH = os.path.join(BASE_DIR, "assets", "logo_empresa.png")

# Crear carpetas necesarias
os.makedirs(os.path.join(BASE_DIR, "assets"), exist_ok=True)
os.makedirs(os.path.join(BASE_DIR, "soportes"), exist_ok=True)

# ---------------- VALIDACI√ìN ARCHIVO DE USUARIOS ----------------
if not os.path.exists(USUARIOS_FILE):
    pd.DataFrame({"usuario": ["admin"], "contrasena": ["250382"]}).to_csv(USUARIOS_FILE, index=False)

usuarios = pd.read_csv(USUARIOS_FILE, dtype=str)
usuarios.columns = usuarios.columns.str.lower().str.strip().str.replace("√±", "n")

# Asegurar columnas correctas
if "usuario" not in usuarios.columns or "contrasena" not in usuarios.columns:
    st.warning("‚ö†Ô∏è El archivo de usuarios ten√≠a formato incorrecto, se ha regenerado autom√°ticamente.")
    pd.DataFrame({"usuario": ["admin"], "contrasena": ["250382"]}).to_csv(USUARIOS_FILE, index=False)
    usuarios = pd.read_csv(USUARIOS_FILE, dtype=str)
    usuarios.columns = usuarios.columns.str.lower().str.strip().str.replace("√±", "n")

# ---------------- FUNCI√ìN LOGIN ----------------
def login():
    st.markdown("<h2 style='text-align:center; color:#1B4965;'>üíä Control de Estado de Medicamentos</h2>", unsafe_allow_html=True)
    st.markdown("---")

    # Logo
    if os.path.exists(LOGO_PATH):
        try:
            logo = Image.open(LOGO_PATH)
            st.image(logo, width=180)
        except Exception:
            st.warning("‚ö†Ô∏è No se pudo mostrar el logo.")
    else:
        st.info("üè• Logo no encontrado en la carpeta 'assets'.")

    usuario = st.text_input("üë§ Usuario")
    contrasena = st.text_input("üîë Contrase√±a", type="password")

    if st.button("Iniciar sesi√≥n"):
        if ((usuarios["usuario"] == usuario) & (usuarios["contrasena"] == contrasena)).any():
            st.session_state["usuario_autenticado"] = usuario
            st.success("‚úÖ Inicio de sesi√≥n exitoso.")
            st.rerun()
        else:
            st.error("‚ùå Usuario o contrase√±a incorrectos.")

# ---------------- FUNCI√ìN PRINCIPAL ----------------
def app_principal():
    st.sidebar.title(f"üëã Bienvenido, {st.session_state['usuario_autenticado']}")
    if st.sidebar.button("üîí Cerrar sesi√≥n"):
        del st.session_state["usuario_autenticado"]
        st.rerun()

    st.markdown("<h2 style='color:#1B4965;'>Panel Principal</h2>", unsafe_allow_html=True)
    st.write("Aqu√≠ ir√° el contenido principal de tu aplicaci√≥n para gestionar el estado de medicamentos (agotados, desabastecidos, descontinuados, etc).")

    # Ejemplo de secci√≥n de registro
    with st.expander("‚ûï Registrar nuevo medicamento"):
        col1, col2, col3 = st.columns(3)
        nombre = col1.text_input("Nombre del medicamento")
        estado = col2.selectbox("Estado", ["Agotado", "Desabastecido", "Descontinuado"])
        fecha = col3.date_input("Fecha de registro", datetime.today())
        if st.button("Guardar registro"):
            st.success(f"üíæ Medicamento '{nombre}' registrado correctamente como '{estado}' el {fecha}.")

# ---------------- CONTROL DE SESI√ìN ----------------
if "usuario_autenticado" not in st.session_state:
    login()
else:
    app_principal()

